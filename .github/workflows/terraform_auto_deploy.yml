on:
  push:
    branches:
      - master
  pull_request:

env:
  GOOGLE_CREDENTIALS:  ${{ secrets.GCP_MAIN_SERVICE_ACCOUNT_SECRET_KEY }}


jobs:
  build-and-deploy:
    name: Deploy Terraform resources to GCP
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           # terraform_version: 0.13.0
#           cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pandas gcsfs

             
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Run unit tests
        run: pytest test/
          
      - name: Zip up src codes folder
        run: zip -r function-source.zip function_source
      
      - name: list all files
        run: ls

      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

#       - name: Update Pull Request
#         uses: actions/github-script@v6
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

#             <details><summary>Show Plan</summary>

#             \`\`\`\n
#             ${process.env.PLAN}
#             \`\`\`

#             </details>

#             *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })
        
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve
